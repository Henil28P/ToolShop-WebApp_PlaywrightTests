// This file is automatically generated when the command $ npm playwright init" was run
import { defineConfig, devices } from '@playwright/test';

/**
 * Read environment variables from file.
 * https://github.com/motdotla/dotenv
 */
// import dotenv from 'dotenv';
// import path from 'path';
// dotenv.config({ path: path.resolve(__dirname, '.env') });

/**
 * See https://playwright.dev/docs/test-configuration.
 */

// A list of different options on this level can be found within the Playwright docs under the testconfig class:
// https://playwright.dev/docs/api/class-testconfig

// For lower level config options in use: https://playwright.dev/docs/test-configuration

// Main method:
export default defineConfig({
  timeout: 30_000, // 30 seconds or 30,000 milliseconds (if 30 seconds goes by and that test is not complete, the test will fail)
  globalTimeout: 10 * 60 * 1000, // 10 minutes (if all of your tests take longer than 10 minutes to run, your Playwright test will fail) - so if your test suite grows in future, you need to change this globalTimeout value
  testDir: './tests',
  /* Run tests in multiple files in parallel */
  fullyParallel: true,
  /* Fail the build on CI if you accidentally left test.only in the source code. */
  forbidOnly: !!process.env.CI,
  /* Retry on CI 2 times and retry locally 1 time */
  retries: process.env.CI ? 2 : 1,
  /* Opt out of parallel tests on CI. */
  workers: process.env.CI ? 1 : undefined,
  /* Reporter to use. See https://playwright.dev/docs/test-reporters */
  reporter: [['html'],['list']], // to add a "list" reporter, convert the string to an array of arrays which is how Playwright supports multiple options in the config file for the reporter
  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */
  use: {
    // This section focuses on details of the browser, browser configuration settings, and how the browser is going to interact when running test
    /* Base URL to use in actions like `await page.goto('/')`. */
    baseURL: 'https://practicesoftwaretesting.com', // URL of this project's test ToolShop website
    testIdAttribute: "data-test",

    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */
    trace: 'on', // the trace file will include things like network request, console error logs and all other elements on the screen along with the timeline view of how that happened.
    actionTimeout: 0,
    ignoreHTTPSErrors: true,
    video: 'retain-on-failure',
    screenshot: 'only-on-failure',
    headless: true, // don't want our browser popping up and interrupting our flow when we want to run a test from our command line
  },

  /* Configure projects for major browsers */
  // Advantage - Playwright gives you these browsers out-of-the-box (you're able to use them with very little configurations)
  // Drawback - when using Playwright, you're locked into a specific version of Chromium, Firefox, or Webkit - this version that is packaged with each version released with Playwright
  projects: [
    // Projects can also be used to set up data, to segregate tests or to override certain browser configurations on a per-project basis
    // Steps on how to create a project with a setup dependency - to ensure that the setup project is always run and passes before running any other projects
    // Create a TS/JS object
    {
      name: "setup",
      testMatch: /.*\.setup\.ts/, // use Regex - this testMatch option is what Playwright looks at to know how to match file names as test for the project (specifically in this project, setup files will be named as "name.setup.ts" rather than "name.spec.ts" which is default)
      // Look at more test matchers at: https://playwright.dev/docs/api/class-testproject#test-project-test-match - check out grep, testMatch, testInvert, testDir, testIgnore and 'use'
      // Also check options of 'use' at: https://playwright.dev/docs/api/class-testoptions#test-options-browser-name
    },
    {
      name: 'chromium',
      dependencies: ["setup"], // value of array and string as setup, what this will do is that when each of the projects with this key of "dependencies" is run successfully before those projects run
      use: { ...devices['Desktop Chrome'], permissions: ["clipboard-read"] }, // will allow us to programmatically access the clipboard within Chrome
    }

    // {
    //   name: 'firefox',
    //   dependencies: ["setup"],
    //   use: { ...devices['Desktop Firefox'] },
    // },

    // {
    //   name: 'webkit',
    //   dependencies: ["setup"],
    //   use: { ...devices['Desktop Safari'] },
    // },

    /* Test against mobile viewports. (For Cross-browser testing) */
    // {
    //   name: 'Mobile Chrome',
    //   use: { ...devices['Pixel 5'] },
    // },
    // {
    //   name: 'Mobile Safari',
    //   use: { ...devices['iPhone 12'] },
    // },

    /* Test against branded browsers. */
    // {
    //   name: 'Microsoft Edge',
    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },
    // },
    // {
    //   name: 'Google Chrome',
    //   use: { ...devices['Desktop Chrome'], channel: 'chrome' },
    // },
  ],

  /* Run your local dev server before starting the tests */
  // webServer: {
  //   command: 'npm run start',
  //   url: 'http://127.0.0.1:3000',
  //   reuseExistingServer: !process.env.CI,
  // },
});
